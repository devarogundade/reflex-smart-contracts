@compiler >= 6

include "Option.aes"
include "String.aes"
include "List.aes"
include "Pair.aes"
include "Set.aes"
include "Utils.aes"
include "./interfaces/IAEX141NFTReceiver.aes"
include "./interfaces/IRfDAOToken.aes"
include "./interfaces/IRfDAOReward.aes"
include "./interfaces/IRfDAO.aes"

/// Reflex DAO Contract
/// @title - RfDAOFactory
contract RfDAOFactory =

    record state = { owner: address
                   , ownersDao: ownersDao
                   , daos: list(address)
                   , dao_model: IRfDAO
                   }

    type ownersDao = map(address, list(address))

    // Declaration and structure of datatype event
    // and events that will be emitted on changes
    datatype event = DAOCreated(address, address, int)

    stateful entrypoint init(dao_model: IRfDAO) = { owner = Call.caller
                                                  , ownersDao = {}
                                                  , daos = []
                                                  , dao_model = dao_model
                                                  }

    stateful entrypoint create_dao( name: string
                                  , summary: string
                                  , subdomain: string
                                  , links: option(string)
                                  , logo: option(string)
                                  , tokenName: string
                                  , tokenSymbol: string
                                  , proposalCreation:int
                                  , participation: int
                                  , minCreation: int
                                  , threshold: int
                                  , minParticipation: int
                                  , multisigMembers: map(address, int)
                                  , minDuration: int
                                  , earlyExecution: bool
                                  , metaTransaction: bool
                                  , reward: int
                                  , allocations: map(address, int)
                                  , iRfDAOToken: IRfDAOToken
                                  , iRfDAOReward: IRfDAOReward
                                  ) = 
            let owner = Call.caller

            /// create dao instance
            let dao: IRfDAO = Chain.clone( ref = state.dao_model 
                                         , name
                                         , summary
                                         , subdomain
                                         , links
                                         , logo
                                         , tokenName
                                         , tokenSymbol
                                         , proposalCreation
                                         , participation
                                         , minCreation
                                         , threshold
                                         , minParticipation
                                         , multisigMembers
                                         , minDuration
                                         , earlyExecution
                                         , metaTransaction
                                         , reward
                                         , owner
                                         , allocations
                                         , iRfDAOToken
                                         , iRfDAOReward
                                         )
            
            // if map has not been initialized for owner
            if (!Map.member(owner, state.ownersDao))
                put(state{ ownersDao[owner] = [] })

            // update state variable
            put(state{ ownersDao[owner] = List.insert_at (0
                                                         , dao.address
                                                         , state.ownersDao[owner]) 
                                                         })

            put(state{ daos = List.insert_at( 0
                                            , dao.address
                                            , state.daos) 
                                            })

            Chain.event(DAOCreated(owner, dao.address, Chain.timestamp))

    entrypoint get_owners_dao(owner: address): list(address) = 
        state.ownersDao[owner]

    entrypoint get_daos(): list(address) = 
        state.daos

    function require_owner() =
        require(Call.caller == state.owner, "ONLY_OWNER_CALL_ALLOWED")