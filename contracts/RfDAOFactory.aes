@compiler >= 6

include "Option.aes"
include "String.aes"
include "List.aes"
include "Pair.aes"
include "Set.aes"

include "./lib/Utils.aes"

include "./interfaces/IAEX141NFTReceiver.aes"
include "./interfaces/IRfDAOReward.aes"
include "./interfaces/IRfDAOToken.aes"
include "./interfaces/IRfDAO.aes"
include "./interfaces/IRfSubdomain.aes"

/// Reflex DAO Contract
/// @title - RfDAOFactory
contract RfDAOFactory =

    record state = { owner: address
                   , ownersDao: ownersDao
                   , daos: map(address, dao)
                   , token_model: IRfDAOToken
                   , reward_model: IRfDAOReward
                   , dao_model: IRfDAO
                   , rfSubdomain: IRfSubdomain
                   }

    record dao = { name: string
                 , summary: string
                 , logo: option(string)
                 , subdomain: string
                 , participation: int
                 }

    type ownersDao = map(address, list(IRfDAO))

    // Declaration and structure of datatype event
    // and events that will be emitted on changes
    datatype event = DAOCreated(address, address, int)

    stateful entrypoint init( token_model: IRfDAOToken
                            , reward_model: IRfDAOReward
                            , dao_model: IRfDAO
                            , rfSubdomain: IRfSubdomain
                            ) = { owner = Call.caller
                                , ownersDao = {}
                                , daos = {}
                                , dao_model = dao_model
                                , token_model = token_model
                                , reward_model = reward_model
                                , rfSubdomain = rfSubdomain
                                }

    stateful entrypoint create_dao( name: string
                                  , summary: string
                                  , subdomain: string
                                  , links: option(string)
                                  , logo: option(string)
                                  , tokenName: string
                                  , tokenSymbol: string
                                  , proposalCreation:int
                                  , participation: int
                                  , minCreation: int
                                  , threshold: int
                                  , minParticipation: int
                                  , multisigMembers: map(address, int)
                                  , minDuration: int
                                  , earlyExecution: bool
                                  , metaTrx: bool
                                  , reward: int
                                  , allocations: map(address, int)
                                  ) = 
            let owner = Call.caller

            /// register subdomain
            state.rfSubdomain.register(subdomain)

            /// create dao instance
            let dao: IRfDAO = Chain.clone( ref = state.dao_model 
                                         , name
                                         , summary
                                         , subdomain
                                         , links
                                         , logo
                                         , tokenName
                                         , tokenSymbol
                                         , proposalCreation
                                         , participation
                                         , minCreation
                                         , threshold
                                         , minParticipation
                                         , minDuration
                                         , earlyExecution
                                         , metaTrx
                                         , reward
                                         , owner
                                         , state.token_model
                                         , state.reward_model
                                         )

            dao.allocate(allocations)
            dao.multisig(multisigMembers)
            
            // if map has not been initialized for owner
            if (!Map.member(owner, state.ownersDao))
                put(state{ ownersDao[owner] = [] })

            // update state variable
            put(state{ ownersDao[owner] = dao::state.ownersDao[owner] }) 
            put(state{ daos[dao.address] = {
                    name = name,
                    summary = summary,
                    logo = logo,
                    subdomain = subdomain,
                    participation = participation
                    }
                })

            Chain.event(DAOCreated(owner, dao.address, Chain.timestamp))
    
    entrypoint get_state(): state = state

    function require_owner() =
        require(Call.caller == state.owner, "ONLY_OWNER_CALL_ALLOWED")