@compiler >= 6

include "Option.aes"
include "String.aes"
include "List.aes"
include "Set.aes"
include "./interfaces/IRfDAOToken.aes"
include "./interfaces/IRfDAOReward.aes"

contract RfDAO =

    record state = {
        owner: address, // owner of dao
        metadata: metadata, // dao metadata
        membership: membership, // dao membership
        governance: governance, // dao governance
        daoToken: option(IRfDAOToken), // dao token
        proposals: proposals, // dao proposals
        treasure: treasure, // dao treasure
        proposalId: int, // dao proposal tracker
        token_model: IRfDAOToken,
        reward_model: IRfDAOReward
        }
    
    record metadata = {
        name: string, // dao name
        summary: string, // dao summary
        subdomain: string, // dao unique readable identity
        links: option(string), // json of dao links
        logo: option(string) // path to dao logo uri
        }

    record membership = {
        proposalCreation: int, // who can create a proposal, 0 - dao token holders, 1 - multisig members 
        participation: int, // who can participate in proposal voting, 0 - dao token holders, 1 - multisig members 
        minCreation: int, // minimum amount of dao tokens required to create a proposal
        multisigMembers: map(address, int)
        }

    record treasure = {
        balance: int,
        locked: int,
        allIn: int,
        allOut: int,
        history: list(treasure_history)
        }

    record treasure_history = {
        summary: string,
        timestamp: int,
        amount: int
        }

    record governance = {
        threshold: int, // percentage
        minParticipation: int, // min numbers of dao tokens require to vote
        minDuration: int, // min duration of any proposal
        earlyExecution: bool, // executing proposal as soon as it has pass threshold
        metaTrx: bool,
        metaTrxBal: int, // suport for dao meta transaction
        daoReward: option(IRfDAOReward), // dao reward type, none or nft c/a
        metaFeeReceiver: address
        }

    record proposal = {
        distributed: bool, // whelther token has been redistributed to votes or not
        executed: bool, // whelther proposal has been executed
        startedOn: int, // proposal voting start time
        endedOn: int, // proposal voting end time
        title: string, // proposal title
        summary: string, // proposal summary
        createdOn: int, // time created
        owner: address, // proposal creator
        votes: map(address, int), // voter -> number of tokens
        approves: list(address), // list of voters that agreed
        disapproves: list(address), // list of voter that disagreed
        treasureAmount: int
        }

    datatype event =
        Distribute(address, int, int)
        | DAOCreated(address, address, int)
        | DAOMemberAdded(address, int)
        | ProposalCreated(int, int)
        | ProposalVote(address, bool, int)
        | ProposalExecuted(int, int)

    // custom type
    datatype voteOption = Abstain | Agree | Disagree
    type proposals = map(int, proposal)

    stateful entrypoint init( name: string
                            , summary: string
                            , subdomain: string
                            , links: option(string)
                            , logo: option(string)
                            , tokenName: string
                            , tokenSymbol: string
                            , proposalCreation:int
                            , participation: int
                            , minCreation: int
                            , threshold: int
                            , minParticipation: int
                            , minDuration: int
                            , earlyExecution: bool
                            , metaTrx: bool
                            , reward: int
                            , owner: address
                            , token_model: IRfDAOToken
                            , reward_model: IRfDAOReward
                            , rfSubdomain: IRfSubdomain
                            ) =
        require(threshold > 0 && threshold < 101, "Invalid threshold")

        let daoToken : option(IRfDAOToken) =
            if (participation == 0)
                // create dao token
                let token = Chain.clone( ref = token_model
                                       , tokenName
                                       , 18
                                       , tokenSymbol
                                       )
                Some(token)
            else
                None

        // create dao reward
        let daoReward : option(IRfDAOReward) =
            if (reward == 1)
                let reward = Chain.clone( ref = reward_model
                                        , String.concat(tokenName, " Reward")
                                        , String.concat("r", tokenSymbol)
                                        , 1000000000000000
                                        )
                Some(reward)
            else
                None

        Chain.event(DAOCreated(Contract.address, owner, Chain.timestamp))

        /// register subdomain
        rfSubdomain.register(subdomain)
        
        // set state
        {
            owner = owner,
            metadata = {
                name = name,
                summary = summary,
                subdomain = subdomain,
                links = links,
                logo = logo
            },
            membership = {
                proposalCreation = proposalCreation,
                participation = participation,
                minCreation = 0,
                multisigMembers = {}
            },
            governance = {
                threshold = threshold,
                minParticipation = minParticipation,
                minDuration = minDuration,
                earlyExecution = earlyExecution,
                metaTrx = metaTrx,
                metaTrxBal = 0,
                daoReward = daoReward,
                metaFeeReceiver = ak_2ThvH3tViRWcytWMCxr3rfiZ3WnQaAqnouCnTGiCcJ6sCYK3uG
            },
            daoToken = daoToken,
            proposals = {},
            treasure = {
                balance = 0,
                locked = 0,
                allIn = 0,
                allOut = 0,
                history = []
            },
            proposalId = 1,
            token_model = token_model,
            reward_model = reward_model
            }

    stateful entrypoint allocate(allocations: map(address, int)) =
        if (Option.is_some(state.daoToken))
            Option.force(state.daoToken).allocate(allocations)

    stateful entrypoint multisig(members: map(address, int)) =
        put(state{ membership.multisigMembers = members })

    /// Create a new proposal
    stateful entrypoint create_proposal( title: string
                                       , summary: string
                                       , treasureAmount: int
                                       , startedOn: int
                                       , endedOn: int
                                       , gasless: bool
                                       ) = 
        let creator = Call.caller

        require(state.treasure.balance >= treasureAmount, "Not enough treasure")
        require(endedOn - startedOn >= (state.governance.minDuration), "Not enough duration")

        let gas: int = Call.gas_price
        if (gasless && state.governance.metaTrx) 
            if(state.governance.metaTrxBal > gas)
                put(state { governance.metaTrxBal = state.governance.metaTrxBal - gas })
            else
                abort("Insufficient gas bal for meta trx")
        
        // skip validation if it's dao owner
        if (creator != state.owner)
            if (state.membership.participation == 0)
                // check if they have enough dao tokens
                let daoToken : IRfDAOToken = Option.force(state.daoToken)
                let amount : option(int) = daoToken.balance(creator)
                let requiredAmount : int = state.governance.minParticipation
                require(Option.default(0, amount) >= requiredAmount, "Not enough dao tokens")
            else
                // check if they have enough multisig power
                let power : int = state.membership.multisigMembers[creator]
                let requiredPower : int = state.governance.minParticipation
                require(power >= requiredPower, "Not a multisig member")

        // creare the dao object
        let proposal: proposal = {
            distributed = false,
            executed = false,
            startedOn = startedOn,
            endedOn = endedOn,
            title = title,
            summary = summary,
            createdOn = Chain.timestamp,
            votes = {},
            owner = Call.caller,
            approves = [],
            disapproves = [],
            treasureAmount = treasureAmount
            }

        // update state variables
        put(state{proposals[state.proposalId] = proposal})
        Chain.event(ProposalCreated(state.proposalId, Chain.timestamp))

        put(state{proposalId = state.proposalId + 1})
        put(state{treasure.locked = state.treasure.locked + treasureAmount})
        put(state{treasure.balance = state.treasure.balance - treasureAmount})

    /// Refund tokens
    /// Refund votes dao tokens after proposal voting ended
    stateful entrypoint distribute_proposal_tokens(proposalId: int) =
        require(state.membership.participation == 0, "Tokens not supported")

        let proposal: proposal = state.proposals[proposalId]

        require(Chain.timestamp > proposal.endedOn, "Proposal has not ended")
        require(!proposal.distributed, "Reward has already been distributed")

        let voters : list(address) = 
            List.merge((approve, disapprove) => approve != disapprove
                      , proposal.approves
                      , proposal.disapproves
                      )
       
        let daoToken : IRfDAOToken = Option.force(state.daoToken)
        List.foreach(voters, (voter) => 
            let amount: int = proposal.votes[voter]
            daoToken.transfer(voter, amount))

        // update state variables
        put(state{proposals[state.proposalId].distributed = true})

    /// Refund tokens
    /// Refund votes dao tokens after proposal voting ended
    stateful entrypoint distribute_proposal_powers(proposalId: int) =
        require(state.membership.participation == 1, "Powers not supported")

        let proposal: proposal = state.proposals[proposalId]

        require(Chain.timestamp > proposal.endedOn, "Proposal has not ended")
        require(!proposal.distributed, "Reward has already been distributed")

        let voters : list(address) = 
            List.merge((approve, disapprove) => approve != disapprove
                      , proposal.approves
                      , proposal.disapproves
                      )
     
        List.foreach(voters, (voter) =>
            let balance: int = state.membership.multisigMembers[voter]
            let amount: int = proposal.votes[voter]
            put(state{ membership.multisigMembers[voter] = balance + amount }))

        // update state variables
        put(state{proposals[state.proposalId].distributed = true})

    /// End proposal
    /// Distribute dao tokens back to voters
    stateful entrypoint end_proposal_early(proposalId: int) =
        require_owner()
        
        let proposal: proposal = state.proposals[proposalId]
        require_active(proposal)

        if (proposal.treasureAmount > 0)
            put(state{ treasure.balance = state.treasure.balance + proposal.treasureAmount })
            put(state{ treasure.balance = state.treasure.locked - proposal.treasureAmount })

        // update state variables
        put(state{proposals[state.proposalId].endedOn = Chain.timestamp})

    /// Vote proposal
    /// Deduct dao tokens from voters
    stateful entrypoint vote_proposal( proposalId: int
                                     , amount: int
                                     , cast: bool
                                     , gasless: bool
                                     ) = 
        let voter = Call.caller

        if (state.membership.participation == 0)
            require(amount >= state.governance.minParticipation, "Not enough tokens/powers")

        // if (Option.is_some(state.governance.daoReward))
        //     let daoReward: IRfDAOReward = Option.force(state.governance.daoReward)
        //     let metadata: option(IRfDAOReward.metadata) = Some(daoReward.MetadataMap({}))
        //     let data: option(string) = Some("")
        //     daoReward.mint(voter, metadata, data)

        let proposal: proposal = state.proposals[proposalId]
        require_active(proposal)

        let gas: int = Call.gas_price
        if (gasless && state.governance.metaTrx) 
            if(state.governance.metaTrxBal > gas)
                put(state { governance.metaTrxBal = state.governance.metaTrxBal - gas })
            else
                abort("Insufficient gas bal for meta trx")

        require(!Map.member(voter, proposal.votes), "Already casted vote")
        
        put(state{ proposals[proposalId].votes[voter] = amount })

        // transfer vote token to dao contract
        if (state.membership.participation == 0)
            let daoToken: IRfDAOToken = Option.force(state.daoToken)
            daoToken.transfer_allowance(voter, Contract.address, amount)
        else
            let balance: int = state.membership.multisigMembers[voter] 
            put(state{ membership.multisigMembers[voter] = balance - amount })

        // update state variables
        if (cast)
            put(state{ proposals[proposalId].approves = List.insert_at( 
                    0, voter, state.proposals[proposalId].approves) 
                })
        else
            put(state{ proposals[proposalId].disapproves = List.insert_at( 
                    0, voter, state.proposals[proposalId].disapproves) 
                })

        Chain.event(ProposalVote(voter, cast, proposalId))


    //
    stateful entrypoint execute_proposal(proposalId: int, summary: string) = 
        require_owner()

        let proposal: proposal = state.proposals[proposalId]
        require(calc_threshold(proposal) >= state.governance.threshold, "Threshold not enough")

        if (!state.governance.earlyExecution)
            require_not_active(proposal)

        let treasureAmount: int = proposal.treasureAmount

        if (treasureAmount > 0 && state.treasure.locked >= treasureAmount)
            Chain.spend(state.owner, proposal.treasureAmount)
            put(state{ treasure.locked = state.treasure.locked - treasureAmount })
            put(state { treasure.allOut = state.treasure.allOut + treasureAmount })

        let history: treasure_history = {
            summary = summary,
            timestamp = Chain.timestamp,
            amount = treasureAmount
            }

        put(state{ treasure.history = history::state.treasure.history })
        put(state{ proposals[proposalId].executed = true })

        Chain.event(ProposalExecuted(proposalId, Chain.timestamp))

    payable stateful entrypoint topup_metatx()  =
        require_owner()
        require(state.governance.metaTrx, "Does not support meta transaction")

        let amount : int =  Call.value
        require(amount > 0, "Must have a value $gt zero")

        // send fee to owner wallet
        Chain.spend(state.governance.metaFeeReceiver, amount)

        put(state { governance.metaTrxBal = state.governance.metaTrxBal + amount })

    payable stateful entrypoint topup_treasure(summary: string)  =
        require_owner()

        let amount : int =  Call.value
        require(amount > 0, "Must have a value $gt zero")

        let history: treasure_history = {
            summary = summary,
            timestamp = Chain.timestamp,
            amount = amount
            }

        put(state{ treasure.history = history::state.treasure.history })
        put(state { treasure.balance = state.treasure.balance + amount })
        put(state { treasure.allIn = state.treasure.allIn + amount })

    stateful entrypoint addDAOMember(wallet: address, value: int) =
        require_owner()

        if (state.membership.participation == 0)
            let daoToken : IRfDAOToken = Option.force(state.daoToken)
            require(Option.default(0, daoToken.balance(wallet)) == 0, "Already a member")
            daoToken.mint(wallet, value)
        else
            require(!Map.member(wallet, state.membership.multisigMembers), "Already a member")
            put(state { membership.multisigMembers[wallet] = value })

        Chain.event(DAOMemberAdded(wallet, value))

    // TODO
    // stateful entrypoint deleteDAOMember(wallet: address) =

    // TODO
    // stateful entrypoint updateDAOMember(wallet: address, value: int) =

    function calc_threshold(proposal: proposal) : int =
        let positves: int = List.length(proposal.approves)
        let negatives: int = List.length(proposal.disapproves)
        ((positves / (positves + negatives)) * 100)

    function require_owner() =
        require(Call.caller == state.owner, "ONLY_OWNER_CALL_ALLOWED")

    function require_active(proposal: proposal) =
        require(Chain.timestamp > proposal.startedOn 
            && Chain.timestamp < proposal.endedOn
            , "PROPOSAL_NOT_IS_ACTIVE")

    function require_not_active(proposal: proposal) =
        require(Chain.timestamp < proposal.startedOn 
            || Chain.timestamp > proposal.endedOn
            , "PROPOSAL_IS_ACTIVE")

    entrypoint daoToken() = state.daoToken

    entrypoint daoReward() = state.governance.daoReward

    entrypoint metadata() = state.metadata

    entrypoint governance() = state.governance

    entrypoint membership() = state.membership

    entrypoint get_state(): state = state

